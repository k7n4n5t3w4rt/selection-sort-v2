{"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/grid-display/index.js":{"size":13553,"mtime":1514957538000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/grid-display/index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/index.js":{"size":400,"mtime":1515029561000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './reset.css'\nimport './index.css'\nimport SelectionSort from './SelectionSort.js'\nimport registerServiceWorker from './registerServiceWorker'\nconst finishCounter = {\n  ALGORITHMS: [],\n  COUNT: 0\n}\nReactDOM.render(\n  <SelectionSort finishCounter={finishCounter} />,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n"}},"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/registerServiceWorker.js":{"size":4021,"mtime":1514931576000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/registerServiceWorker.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n"}},"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/selection-sort/index.js":{"size":6452,"mtime":1514956362000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/selection-sort/index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/SelectionSort.js":{"size":1331,"mtime":1515029211000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/SelectionSort.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\n\nimport React, { Component } from 'react'\n// JS: Make these proper npm package imports\nimport { selectionSortFactory } from './selection-sort/index.js'\nimport { gridDisplay } from './grid-display/index.js'\n// CSS\nimport './SelectionSort.css'\nimport './grid-display/main.css'\nimport './grid-display/font-awesome/css/font-awesome.min.css'\n\nclass SelectionSort extends Component {\n  render = () => {\n    return (\n      <div id=\"selection-sort\" className=\"viz\"></div>\n    )\n  }\n\n  componentDidMount = () => {\n    // Config\n    const selectionConf = {\n      FPS: 10,\n      MAX_SECONDS_TRANSITION_INTERVAL: 2,\n      COLS: 4,\n      ROWS: 4,\n      SHOW_WORKING: false,\n      LOOP: true,\n      RELOAD_INTERVAL: 2000,\n      CONSTANT_TRANSITION_SPEED: false,\n      FINISH_COUNTER: this.props.finishCounter,\n      CONTAINER_ID: 'selection-sort'\n    }\n\n    console.log('SelectionSort.conponentDidMount', this.props.finishCounter)\n    // --------------------------------- //\n    // SELECTION SORT\n    // --------------------------------- //\n    const selectionSort = selectionSortFactory(selectionConf, gridDisplay)\n    // I shouldn't, but I am. Adding this algorithm  to the FINISH_COUNTER.ALGORITHMS prop\n    selectionConf.FINISH_COUNTER.ALGORITHMS.push(selectionSort)\n    selectionSort.run()\n  }\n}\n\nexport default SelectionSort\n"}},"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/SelectionSort.test.js":{"size":241,"mtime":1514961394000,"hashOfConfig":"25cfse","results":{"filePath":"/apps/k7n4n5t3w4rt.github.io/selection-sort/src/SelectionSort.test.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SelectionSort from './SelectionSort.js'\n\nit('renders without crashing', () => {\n  const div = document.createElement('div')\n  ReactDOM.render(<SelectionSort />, div)\n})\n"}}}